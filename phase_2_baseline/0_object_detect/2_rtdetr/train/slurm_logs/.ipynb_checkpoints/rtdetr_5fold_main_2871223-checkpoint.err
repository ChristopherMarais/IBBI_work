CRITICAL ERROR in Fold-3_GPU-2: '[31m[1mend2end[0m' is not a valid YOLO argument. 

    Arguments received: ['yolo']. Ultralytics 'yolo' commands use the following syntax:

        yolo TASK MODE ARGS

        Where   TASK (optional) is one of frozenset({'segment', 'obb', 'pose', 'detect', 'classify'})
                MODE (required) is one of frozenset({'train', 'export', 'track', 'benchmark', 'predict', 'val'})
                ARGS (optional) are any number of custom 'arg=value' pairs like 'imgsz=320' that override defaults.
                    See all ARGS at https://docs.ultralytics.com/usage/cfg or with 'yolo cfg'

    1. Train a detection model for 10 epochs with an initial learning_rate of 0.01
        yolo train data=coco8.yaml model=yolo11n.pt epochs=10 lr0=0.01

    2. Predict a YouTube video using a pretrained segmentation model at image size 320:
        yolo predict model=yolo11n-seg.pt source='https://youtu.be/LNwODJXcvt4' imgsz=320

    3. Val a pretrained detection model at batch-size 1 and image size 640:
        yolo val model=yolo11n.pt data=coco8.yaml batch=1 imgsz=640

    4. Export a YOLO11n classification model to ONNX format at image size 224 by 128 (no TASK required)
        yolo export model=yolo11n-cls.pt format=onnx imgsz=224,128

    5. Ultralytics solutions usage
        yolo solutions count or in ['crop', 'blur', 'workout', 'heatmap', 'isegment', 'visioneye', 'speed', 'queue', 'analytics', 'inference', 'trackzone'] source="path/to/video.mp4"

    6. Run special commands:
        yolo help
        yolo checks
        yolo version
        yolo settings
        yolo copy-cfg
        yolo cfg
        yolo solutions help

    Docs: https://docs.ultralytics.com
    Solutions: https://docs.ultralytics.com/solutions/
    Community: https://community.ultralytics.com
    GitHub: https://github.com/ultralytics/ultralytics
    
See script log ./results_rtdetr-x/fold_3/script_log_fold_3_gpu_2.log and Ultralytics log ./results_rtdetr-x/fold_3/ultralytics_output_fold_3_gpu_2.log for details.CRITICAL ERROR in Fold-5_GPU-4: '[31m[1mend2end[0m' is not a valid YOLO argument. 

    Arguments received: ['yolo']. Ultralytics 'yolo' commands use the following syntax:

        yolo TASK MODE ARGS

        Where   TASK (optional) is one of frozenset({'obb', 'classify', 'segment', 'pose', 'detect'})
                MODE (required) is one of frozenset({'export', 'benchmark', 'train', 'predict', 'track', 'val'})
                ARGS (optional) are any number of custom 'arg=value' pairs like 'imgsz=320' that override defaults.
                    See all ARGS at https://docs.ultralytics.com/usage/cfg or with 'yolo cfg'

    1. Train a detection model for 10 epochs with an initial learning_rate of 0.01
        yolo train data=coco8.yaml model=yolo11n.pt epochs=10 lr0=0.01

    2. Predict a YouTube video using a pretrained segmentation model at image size 320:
        yolo predict model=yolo11n-seg.pt source='https://youtu.be/LNwODJXcvt4' imgsz=320

    3. Val a pretrained detection model at batch-size 1 and image size 640:
        yolo val model=yolo11n.pt data=coco8.yaml batch=1 imgsz=640

    4. Export a YOLO11n classification model to ONNX format at image size 224 by 128 (no TASK required)
        yolo export model=yolo11n-cls.pt format=onnx imgsz=224,128

    5. Ultralytics solutions usage
        yolo solutions count or in ['crop', 'blur', 'workout', 'heatmap', 'isegment', 'visioneye', 'speed', 'queue', 'analytics', 'inference', 'trackzone'] source="path/to/video.mp4"

    6. Run special commands:
        yolo help
        yolo checks
        yolo version
        yolo settings
        yolo copy-cfg
        yolo cfg
        yolo solutions help

    Docs: https://docs.ultralytics.com
    Solutions: https://docs.ultralytics.com/solutions/
    Community: https://community.ultralytics.com
    GitHub: https://github.com/ultralytics/ultralytics
    
See script log ./results_rtdetr-x/fold_5/script_log_fold_5_gpu_4.log and Ultralytics log ./results_rtdetr-x/fold_5/ultralytics_output_fold_5_gpu_4.log for details.
CRITICAL ERROR in Fold-4_GPU-3: '[31m[1mend2end[0m' is not a valid YOLO argument. 

    Arguments received: ['yolo']. Ultralytics 'yolo' commands use the following syntax:

        yolo TASK MODE ARGS

        Where   TASK (optional) is one of frozenset({'segment', 'pose', 'classify', 'obb', 'detect'})
                MODE (required) is one of frozenset({'val', 'track', 'train', 'predict', 'export', 'benchmark'})
                ARGS (optional) are any number of custom 'arg=value' pairs like 'imgsz=320' that override defaults.
                    See all ARGS at https://docs.ultralytics.com/usage/cfg or with 'yolo cfg'

    1. Train a detection model for 10 epochs with an initial learning_rate of 0.01
        yolo train data=coco8.yaml model=yolo11n.pt epochs=10 lr0=0.01

    2. Predict a YouTube video using a pretrained segmentation model at image size 320:
        yolo predict model=yolo11n-seg.pt source='https://youtu.be/LNwODJXcvt4' imgsz=320

    3. Val a pretrained detection model at batch-size 1 and image size 640:
        yolo val model=yolo11n.pt data=coco8.yaml batch=1 imgsz=640

    4. Export a YOLO11n classification model to ONNX format at image size 224 by 128 (no TASK required)
        yolo export model=yolo11n-cls.pt format=onnx imgsz=224,128

    5. Ultralytics solutions usage
        yolo solutions count or in ['crop', 'blur', 'workout', 'heatmap', 'isegment', 'visioneye', 'speed', 'queue', 'analytics', 'inference', 'trackzone'] source="path/to/video.mp4"

    6. Run special commands:
        yolo help
        yolo checks
        yolo version
        yolo settings
        yolo copy-cfg
        yolo cfg
        yolo solutions help

    Docs: https://docs.ultralytics.com
    Solutions: https://docs.ultralytics.com/solutions/
    Community: https://community.ultralytics.com
    GitHub: https://github.com/ultralytics/ultralytics
    
See script log ./results_rtdetr-x/fold_4/script_log_fold_4_gpu_3.log and Ultralytics log ./results_rtdetr-x/fold_4/ultralytics_output_fold_4_gpu_3.log for details.

Process Fold-3_GPU-2:
Process Fold-5_GPU-4:
Process Fold-4_GPU-3:
Traceback (most recent call last):
Traceback (most recent call last):
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
Traceback (most recent call last):
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/blue/hulcr/gmarais/PhD/phase_2_baseline/0_object_detection/8_rtdetr/train/rtdetr_5fold.py", line 179, in train_single_fold
    results = model.train(**current_train_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/PhD/phase_2_baseline/0_object_detection/8_rtdetr/train/rtdetr_5fold.py", line 179, in train_single_fold
    results = model.train(**current_train_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/engine/model.py", line 787, in train
    self.trainer = (trainer or self._smart_load("trainer"))(overrides=args, _callbacks=self.callbacks)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/engine/model.py", line 787, in train
    self.trainer = (trainer or self._smart_load("trainer"))(overrides=args, _callbacks=self.callbacks)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/engine/trainer.py", line 103, in __init__
    self.args = get_cfg(cfg, overrides)
                ^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/engine/trainer.py", line 103, in __init__
    self.args = get_cfg(cfg, overrides)
                ^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/cfg/__init__.py", line 306, in get_cfg
    check_dict_alignment(cfg, overrides)
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/cfg/__init__.py", line 306, in get_cfg
    check_dict_alignment(cfg, overrides)
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/cfg/__init__.py", line 496, in check_dict_alignment
    raise SyntaxError(string + CLI_HELP_MSG) from e
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/cfg/__init__.py", line 496, in check_dict_alignment
    raise SyntaxError(string + CLI_HELP_MSG) from e
SyntaxError: '[31m[1mend2end[0m' is not a valid YOLO argument. 

    Arguments received: ['yolo']. Ultralytics 'yolo' commands use the following syntax:

        yolo TASK MODE ARGS

        Where   TASK (optional) is one of frozenset({'segment', 'obb', 'pose', 'detect', 'classify'})
                MODE (required) is one of frozenset({'train', 'export', 'track', 'benchmark', 'predict', 'val'})
                ARGS (optional) are any number of custom 'arg=value' pairs like 'imgsz=320' that override defaults.
                    See all ARGS at https://docs.ultralytics.com/usage/cfg or with 'yolo cfg'

    1. Train a detection model for 10 epochs with an initial learning_rate of 0.01
        yolo train data=coco8.yaml model=yolo11n.pt epochs=10 lr0=0.01

    2. Predict a YouTube video using a pretrained segmentation model at image size 320:
        yolo predict model=yolo11n-seg.pt source='https://youtu.be/LNwODJXcvt4' imgsz=320

    3. Val a pretrained detection model at batch-size 1 and image size 640:
        yolo val model=yolo11n.pt data=coco8.yaml batch=1 imgsz=640

    4. Export a YOLO11n classification model to ONNX format at image size 224 by 128 (no TASK required)
        yolo export model=yolo11n-cls.pt format=onnx imgsz=224,128

    5. Ultralytics solutions usage
        yolo solutions count or in ['crop', 'blur', 'workout', 'heatmap', 'isegment', 'visioneye', 'speed', 'queue', 'analytics', 'inference', 'trackzone'] source="path/to/video.mp4"

    6. Run special commands:
        yolo help
        yolo checks
        yolo version
        yolo settings
        yolo copy-cfg
        yolo cfg
        yolo solutions help

    Docs: https://docs.ultralytics.com
    Solutions: https://docs.ultralytics.com/solutions/
    Community: https://community.ultralytics.com
    GitHub: https://github.com/ultralytics/ultralytics
    
SyntaxError: '[31m[1mend2end[0m' is not a valid YOLO argument. 

    Arguments received: ['yolo']. Ultralytics 'yolo' commands use the following syntax:

        yolo TASK MODE ARGS

        Where   TASK (optional) is one of frozenset({'obb', 'classify', 'segment', 'pose', 'detect'})
                MODE (required) is one of frozenset({'export', 'benchmark', 'train', 'predict', 'track', 'val'})
                ARGS (optional) are any number of custom 'arg=value' pairs like 'imgsz=320' that override defaults.
                    See all ARGS at https://docs.ultralytics.com/usage/cfg or with 'yolo cfg'

    1. Train a detection model for 10 epochs with an initial learning_rate of 0.01
        yolo train data=coco8.yaml model=yolo11n.pt epochs=10 lr0=0.01

    2. Predict a YouTube video using a pretrained segmentation model at image size 320:
        yolo predict model=yolo11n-seg.pt source='https://youtu.be/LNwODJXcvt4' imgsz=320

    3. Val a pretrained detection model at batch-size 1 and image size 640:
        yolo val model=yolo11n.pt data=coco8.yaml batch=1 imgsz=640

    4. Export a YOLO11n classification model to ONNX format at image size 224 by 128 (no TASK required)
        yolo export model=yolo11n-cls.pt format=onnx imgsz=224,128

    5. Ultralytics solutions usage
        yolo solutions count or in ['crop', 'blur', 'workout', 'heatmap', 'isegment', 'visioneye', 'speed', 'queue', 'analytics', 'inference', 'trackzone'] source="path/to/video.mp4"

    6. Run special commands:
        yolo help
        yolo checks
        yolo version
        yolo settings
        yolo copy-cfg
        yolo cfg
        yolo solutions help

    Docs: https://docs.ultralytics.com
    Solutions: https://docs.ultralytics.com/solutions/
    Community: https://community.ultralytics.com
    GitHub: https://github.com/ultralytics/ultralytics
    
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/blue/hulcr/gmarais/PhD/phase_2_baseline/0_object_detection/8_rtdetr/train/rtdetr_5fold.py", line 179, in train_single_fold
    results = model.train(**current_train_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/engine/model.py", line 787, in train
    self.trainer = (trainer or self._smart_load("trainer"))(overrides=args, _callbacks=self.callbacks)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/engine/trainer.py", line 103, in __init__
    self.args = get_cfg(cfg, overrides)
                ^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/cfg/__init__.py", line 306, in get_cfg
    check_dict_alignment(cfg, overrides)
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/cfg/__init__.py", line 496, in check_dict_alignment
    raise SyntaxError(string + CLI_HELP_MSG) from e
SyntaxError: '[31m[1mend2end[0m' is not a valid YOLO argument. 

    Arguments received: ['yolo']. Ultralytics 'yolo' commands use the following syntax:

        yolo TASK MODE ARGS

        Where   TASK (optional) is one of frozenset({'segment', 'pose', 'classify', 'obb', 'detect'})
                MODE (required) is one of frozenset({'val', 'track', 'train', 'predict', 'export', 'benchmark'})
                ARGS (optional) are any number of custom 'arg=value' pairs like 'imgsz=320' that override defaults.
                    See all ARGS at https://docs.ultralytics.com/usage/cfg or with 'yolo cfg'

    1. Train a detection model for 10 epochs with an initial learning_rate of 0.01
        yolo train data=coco8.yaml model=yolo11n.pt epochs=10 lr0=0.01

    2. Predict a YouTube video using a pretrained segmentation model at image size 320:
        yolo predict model=yolo11n-seg.pt source='https://youtu.be/LNwODJXcvt4' imgsz=320

    3. Val a pretrained detection model at batch-size 1 and image size 640:
        yolo val model=yolo11n.pt data=coco8.yaml batch=1 imgsz=640

    4. Export a YOLO11n classification model to ONNX format at image size 224 by 128 (no TASK required)
        yolo export model=yolo11n-cls.pt format=onnx imgsz=224,128

    5. Ultralytics solutions usage
        yolo solutions count or in ['crop', 'blur', 'workout', 'heatmap', 'isegment', 'visioneye', 'speed', 'queue', 'analytics', 'inference', 'trackzone'] source="path/to/video.mp4"

    6. Run special commands:
        yolo help
        yolo checks
        yolo version
        yolo settings
        yolo copy-cfg
        yolo cfg
        yolo solutions help

    Docs: https://docs.ultralytics.com
    Solutions: https://docs.ultralytics.com/solutions/
    Community: https://community.ultralytics.com
    GitHub: https://github.com/ultralytics/ultralytics
    
CRITICAL ERROR in Fold-2_GPU-1: '[31m[1mend2end[0m' is not a valid YOLO argument. 

    Arguments received: ['yolo']. Ultralytics 'yolo' commands use the following syntax:

        yolo TASK MODE ARGS

        Where   TASK (optional) is one of frozenset({'segment', 'obb', 'detect', 'pose', 'classify'})
                MODE (required) is one of frozenset({'train', 'export', 'val', 'predict', 'track', 'benchmark'})
                ARGS (optional) are any number of custom 'arg=value' pairs like 'imgsz=320' that override defaults.
                    See all ARGS at https://docs.ultralytics.com/usage/cfg or with 'yolo cfg'

    1. Train a detection model for 10 epochs with an initial learning_rate of 0.01
        yolo train data=coco8.yaml model=yolo11n.pt epochs=10 lr0=0.01

    2. Predict a YouTube video using a pretrained segmentation model at image size 320:
        yolo predict model=yolo11n-seg.pt source='https://youtu.be/LNwODJXcvt4' imgsz=320

    3. Val a pretrained detection model at batch-size 1 and image size 640:
        yolo val model=yolo11n.pt data=coco8.yaml batch=1 imgsz=640

    4. Export a YOLO11n classification model to ONNX format at image size 224 by 128 (no TASK required)
        yolo export model=yolo11n-cls.pt format=onnx imgsz=224,128

    5. Ultralytics solutions usage
        yolo solutions count or in ['crop', 'blur', 'workout', 'heatmap', 'isegment', 'visioneye', 'speed', 'queue', 'analytics', 'inference', 'trackzone'] source="path/to/video.mp4"

    6. Run special commands:
        yolo help
        yolo checks
        yolo version
        yolo settings
        yolo copy-cfg
        yolo cfg
        yolo solutions help

    Docs: https://docs.ultralytics.com
    Solutions: https://docs.ultralytics.com/solutions/
    Community: https://community.ultralytics.com
    GitHub: https://github.com/ultralytics/ultralytics
    
See script log ./results_rtdetr-x/fold_2/script_log_fold_2_gpu_1.log and Ultralytics log ./results_rtdetr-x/fold_2/ultralytics_output_fold_2_gpu_1.log for details.
CRITICAL ERROR in Fold-1_GPU-0: '[31m[1mend2end[0m' is not a valid YOLO argument. 

    Arguments received: ['yolo']. Ultralytics 'yolo' commands use the following syntax:

        yolo TASK MODE ARGS

        Where   TASK (optional) is one of frozenset({'segment', 'classify', 'pose', 'obb', 'detect'})
                MODE (required) is one of frozenset({'train', 'export', 'predict', 'benchmark', 'val', 'track'})
                ARGS (optional) are any number of custom 'arg=value' pairs like 'imgsz=320' that override defaults.
                    See all ARGS at https://docs.ultralytics.com/usage/cfg or with 'yolo cfg'

    1. Train a detection model for 10 epochs with an initial learning_rate of 0.01
        yolo train data=coco8.yaml model=yolo11n.pt epochs=10 lr0=0.01

    2. Predict a YouTube video using a pretrained segmentation model at image size 320:
        yolo predict model=yolo11n-seg.pt source='https://youtu.be/LNwODJXcvt4' imgsz=320

    3. Val a pretrained detection model at batch-size 1 and image size 640:
        yolo val model=yolo11n.pt data=coco8.yaml batch=1 imgsz=640

    4. Export a YOLO11n classification model to ONNX format at image size 224 by 128 (no TASK required)
        yolo export model=yolo11n-cls.pt format=onnx imgsz=224,128

    5. Ultralytics solutions usage
        yolo solutions count or in ['crop', 'blur', 'workout', 'heatmap', 'isegment', 'visioneye', 'speed', 'queue', 'analytics', 'inference', 'trackzone'] source="path/to/video.mp4"

    6. Run special commands:
        yolo help
        yolo checks
        yolo version
        yolo settings
        yolo copy-cfg
        yolo cfg
        yolo solutions help

    Docs: https://docs.ultralytics.com
    Solutions: https://docs.ultralytics.com/solutions/
    Community: https://community.ultralytics.com
    GitHub: https://github.com/ultralytics/ultralytics
    
See script log ./results_rtdetr-x/fold_1/script_log_fold_1_gpu_0.log and Ultralytics log ./results_rtdetr-x/fold_1/ultralytics_output_fold_1_gpu_0.log for details.
Process Fold-2_GPU-1:
Process Fold-1_GPU-0:
Traceback (most recent call last):
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/blue/hulcr/gmarais/PhD/phase_2_baseline/0_object_detection/8_rtdetr/train/rtdetr_5fold.py", line 179, in train_single_fold
    results = model.train(**current_train_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/engine/model.py", line 787, in train
    self.trainer = (trainer or self._smart_load("trainer"))(overrides=args, _callbacks=self.callbacks)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/engine/trainer.py", line 103, in __init__
    self.args = get_cfg(cfg, overrides)
                ^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/cfg/__init__.py", line 306, in get_cfg
    check_dict_alignment(cfg, overrides)
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/cfg/__init__.py", line 496, in check_dict_alignment
    raise SyntaxError(string + CLI_HELP_MSG) from e
SyntaxError: '[31m[1mend2end[0m' is not a valid YOLO argument. 

    Arguments received: ['yolo']. Ultralytics 'yolo' commands use the following syntax:

        yolo TASK MODE ARGS

        Where   TASK (optional) is one of frozenset({'segment', 'obb', 'detect', 'pose', 'classify'})
                MODE (required) is one of frozenset({'train', 'export', 'val', 'predict', 'track', 'benchmark'})
                ARGS (optional) are any number of custom 'arg=value' pairs like 'imgsz=320' that override defaults.
                    See all ARGS at https://docs.ultralytics.com/usage/cfg or with 'yolo cfg'

    1. Train a detection model for 10 epochs with an initial learning_rate of 0.01
        yolo train data=coco8.yaml model=yolo11n.pt epochs=10 lr0=0.01

    2. Predict a YouTube video using a pretrained segmentation model at image size 320:
        yolo predict model=yolo11n-seg.pt source='https://youtu.be/LNwODJXcvt4' imgsz=320

    3. Val a pretrained detection model at batch-size 1 and image size 640:
        yolo val model=yolo11n.pt data=coco8.yaml batch=1 imgsz=640

    4. Export a YOLO11n classification model to ONNX format at image size 224 by 128 (no TASK required)
        yolo export model=yolo11n-cls.pt format=onnx imgsz=224,128

    5. Ultralytics solutions usage
        yolo solutions count or in ['crop', 'blur', 'workout', 'heatmap', 'isegment', 'visioneye', 'speed', 'queue', 'analytics', 'inference', 'trackzone'] source="path/to/video.mp4"

    6. Run special commands:
        yolo help
        yolo checks
        yolo version
        yolo settings
        yolo copy-cfg
        yolo cfg
        yolo solutions help

    Docs: https://docs.ultralytics.com
    Solutions: https://docs.ultralytics.com/solutions/
    Community: https://community.ultralytics.com
    GitHub: https://github.com/ultralytics/ultralytics
    
Traceback (most recent call last):
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/blue/hulcr/gmarais/PhD/phase_2_baseline/0_object_detection/8_rtdetr/train/rtdetr_5fold.py", line 179, in train_single_fold
    results = model.train(**current_train_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/engine/model.py", line 787, in train
    self.trainer = (trainer or self._smart_load("trainer"))(overrides=args, _callbacks=self.callbacks)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/engine/trainer.py", line 103, in __init__
    self.args = get_cfg(cfg, overrides)
                ^^^^^^^^^^^^^^^^^^^^^^^
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/cfg/__init__.py", line 306, in get_cfg
    check_dict_alignment(cfg, overrides)
  File "/blue/hulcr/gmarais/conda/envs/EEL/lib/python3.11/site-packages/ultralytics/cfg/__init__.py", line 496, in check_dict_alignment
    raise SyntaxError(string + CLI_HELP_MSG) from e
SyntaxError: '[31m[1mend2end[0m' is not a valid YOLO argument. 

    Arguments received: ['yolo']. Ultralytics 'yolo' commands use the following syntax:

        yolo TASK MODE ARGS

        Where   TASK (optional) is one of frozenset({'segment', 'classify', 'pose', 'obb', 'detect'})
                MODE (required) is one of frozenset({'train', 'export', 'predict', 'benchmark', 'val', 'track'})
                ARGS (optional) are any number of custom 'arg=value' pairs like 'imgsz=320' that override defaults.
                    See all ARGS at https://docs.ultralytics.com/usage/cfg or with 'yolo cfg'

    1. Train a detection model for 10 epochs with an initial learning_rate of 0.01
        yolo train data=coco8.yaml model=yolo11n.pt epochs=10 lr0=0.01

    2. Predict a YouTube video using a pretrained segmentation model at image size 320:
        yolo predict model=yolo11n-seg.pt source='https://youtu.be/LNwODJXcvt4' imgsz=320

    3. Val a pretrained detection model at batch-size 1 and image size 640:
        yolo val model=yolo11n.pt data=coco8.yaml batch=1 imgsz=640

    4. Export a YOLO11n classification model to ONNX format at image size 224 by 128 (no TASK required)
        yolo export model=yolo11n-cls.pt format=onnx imgsz=224,128

    5. Ultralytics solutions usage
        yolo solutions count or in ['crop', 'blur', 'workout', 'heatmap', 'isegment', 'visioneye', 'speed', 'queue', 'analytics', 'inference', 'trackzone'] source="path/to/video.mp4"

    6. Run special commands:
        yolo help
        yolo checks
        yolo version
        yolo settings
        yolo copy-cfg
        yolo cfg
        yolo solutions help

    Docs: https://docs.ultralytics.com
    Solutions: https://docs.ultralytics.com/solutions/
    Community: https://community.ultralytics.com
    GitHub: https://github.com/ultralytics/ultralytics
    
